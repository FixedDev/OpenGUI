/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 07 18:23:11 GMT 2017
 */

package pl.socketbyte.opengui;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.UUID;
import java.util.logging.Logger;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.runtime.MockitoExtension.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.any;
import static org.evosuite.shaded.org.mockito.Mockito.anyInt;
import static org.evosuite.shaded.org.mockito.Mockito.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class GUI_ESTest extends GUI_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        Random.setNextRandom((-2470));
        GUI gUI0 = new GUI(null, "^<#y47-z*9mVbo+");
        UUID uUID0 = gUI0.getUniqueId();
        assertEquals((-6482650185820717056L), uUID0.getMostSignificantBits());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        Rows rows0 = Rows.TWO;
        GUI gUI0 = new GUI(null, "", rows0);
        String string0 = gUI0.getTitle();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null, (Inventory) null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        Rows rows0 = Rows.TWO;
        GUI gUI0 = new GUI(null, "", rows0);
        Rows rows1 = gUI0.getRows();
        Inventory inventory0 = GUI.createInventory(null, rows1, "9x:mC:");
        assertNull(inventory0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        Inventory inventory0 = GUI.createInventory(null, 0, "");
        assertNull(inventory0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Rows rows0 = Rows.ONE;
        // Undeclared exception!
        try {
            GUI.createInventory(null, rows0, "");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.bukkit.Bukkit", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        GUI gUI0 = new GUI(null, "^<#y47-z*9mVbo+");
        ItemBuilder itemBuilder0 = mock(ItemBuilder.class, new ViolatedAssumptionAnswer());
        doReturn(null, (ItemStack) null).when(itemBuilder0).getItem();
        // Undeclared exception!
        try {
            gUI0.addItem(itemBuilder0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("pl.socketbyte.opengui.GUI", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Rows rows0 = Rows.ONE;
        GUI gUI0 = null;
        try {
            gUI0 = new GUI(null, "", rows0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.bukkit.Bukkit", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        GUI gUI0 = new GUI(null, "^<#y47-z*9mVbo+");
        UUID uUID0 = gUI0.getUniqueId();
        assertEquals(16793600L, uUID0.getMostSignificantBits());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        ItemStack itemStack0 = mock(ItemStack.class, new ViolatedAssumptionAnswer());
        Material material0 = Material.DARK_OAK_STAIRS;
        ItemStack itemStack1 = mock(ItemStack.class, new ViolatedAssumptionAnswer());
        doReturn(material0).when(itemStack1).getType();
        ItemBuilder itemBuilder0 = mock(ItemBuilder.class, new ViolatedAssumptionAnswer());
        doReturn(itemStack0, itemStack1).when(itemBuilder0).getItem();
        GUI gUI0 = new GUI(null, "^<#y47-z*9mVbo+");
        int int0 = gUI0.addItem(itemBuilder0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        GUI gUI0 = new GUI(null, "^<#y47-z*9mVbo+");
        // Undeclared exception!
        try {
            gUI0.removeItem((-2470));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("pl.socketbyte.opengui.GUI", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        // Undeclared exception!
        try {
            GUI.createInventory(null, 0, "");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.bukkit.Bukkit", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        GUI gUI0 = new GUI("9x:mC:");
        gUI0.setInventory(null);
        assertEquals("9x:mC:", gUI0.getTitle());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("9x:mC:").when(server0).getVersion();
        Bukkit.setServer(server0);
        Rows rows0 = Rows.ONE;
        GUI gUI0 = new GUI("WF\"CWRH", rows0);
        Inventory inventory0 = gUI0.getInventory();
        assertNull(inventory0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        GUI gUI0 = new GUI(null, "^<#y47-z*9mVbo+");
        String string0 = gUI0.getTitle();
        assertEquals("^<#y47-z*9mVbo+", string0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        GUI gUI0 = null;
        try {
            gUI0 = new GUI(null, "^<#y47-z*9mVbo+");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.bukkit.Bukkit", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        Rows rows0 = Rows.TWO;
        GUI gUI0 = new GUI(null, "", rows0);
        InventoryHolder inventoryHolder0 = gUI0.getHolder();
        assertNull(inventoryHolder0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        GUI gUI0 = new GUI("9x:mC:");
        ItemStack itemStack0 = mock(ItemStack.class, new ViolatedAssumptionAnswer());
        ItemBuilder itemBuilder0 = mock(ItemBuilder.class, new ViolatedAssumptionAnswer());
        doReturn(itemStack0).when(itemBuilder0).getItem();
        gUI0.setItem((-2470), itemBuilder0);
        assertEquals("9x:mC:", gUI0.getTitle());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Rows rows0 = Rows.ONE;
        GUI gUI0 = null;
        try {
            gUI0 = new GUI("WF\"CWRH", rows0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.bukkit.Bukkit", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(server0).createInventory(any(org.bukkit.inventory.InventoryHolder.class), anyInt(), anyString());
        doReturn(null).when(server0).getBukkitVersion();
        doReturn(logger0).when(server0).getLogger();
        doReturn("9x:mC:").when(server0).getName();
        doReturn("").when(server0).getVersion();
        Bukkit.setServer(server0);
        Rows rows0 = Rows.TWO;
        GUI gUI0 = new GUI(null, "", rows0);
        String string0 = gUI0.toString();
        assertEquals("00000000-0100-4000-8200-000003000000", string0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        GUI gUI0 = null;
        try {
            gUI0 = new GUI("9x:mC:");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.bukkit.Bukkit", e);
        }
    }
}
