/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 07 15:53:27 GMT 2017
 */

package pl.socketbyte.opengui;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import pl.socketbyte.opengui.event.ElementResponse;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class GUIElement_ESTest extends GUIElement_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        GUIElement gUIElement0 = new GUIElement((-2447));
        gUIElement0.isPullable();
        assertEquals((-2447), gUIElement0.getSlot());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        GUIElement gUIElement0 = new GUIElement(64, false);
        int int0 = gUIElement0.getSlot();
        assertFalse(gUIElement0.isPullable());
        assertEquals(64, int0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        GUIElement gUIElement0 = new GUIElement((-2447));
        int int0 = gUIElement0.getSlot();
        assertEquals((-2447), int0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        GUIElement gUIElement0 = new GUIElement(64, false);
        // Undeclared exception!
        try {
            gUIElement0.addElementResponse(64, null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("pl.socketbyte.opengui.GUIElement", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        GUIElement gUIElement0 = new GUIElement(0, true);
        boolean boolean0 = gUIElement0.isPullable();
        assertTrue(boolean0);
        assertEquals(0, gUIElement0.getSlot());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        GUIElement gUIElement0 = new GUIElement(0, true);
        int int0 = gUIElement0.getSlot();
        assertTrue(gUIElement0.isPullable());
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        GUIElement gUIElement0 = new GUIElement(0, true);
        String string0 = gUIElement0.toString();
        assertTrue(gUIElement0.isPullable());
        assertEquals("[0] 0", string0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        GUIElement gUIElement0 = new GUIElement((-2447));
        gUIElement0.getGuiExtenderItem();
        assertEquals((-2447), gUIElement0.getSlot());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        GUIElement gUIElement0 = new GUIElement((-2447));
        gUIElement0.addElementResponse((-2447), false, null);
        assertEquals((-2447), gUIElement0.getSlot());
        assertFalse(gUIElement0.isPullable());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        GUIElement gUIElement0 = new GUIElement(0, true);
        assertTrue(gUIElement0.isPullable());

        gUIElement0.addElementResponse(0, (ElementResponse) null);
        assertFalse(gUIElement0.isPullable());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        GUIElement gUIElement0 = new GUIElement(0, true);
        gUIElement0.getElementResponse();
        assertTrue(gUIElement0.isPullable());
        assertEquals(0, gUIElement0.getSlot());
    }
}
